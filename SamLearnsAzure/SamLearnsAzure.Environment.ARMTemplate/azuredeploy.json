{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appPrefix": {
      "type": "string",
      "minLength": 1,
      "maxLength": 15
    },
    "environment": {
      "type": "string",
      "allowedValues": [
        "dev",
        "qa",
        "qa2",
        "test",
        "prod"
      ]
    },
    "locationShort": {
      "type": "string",
      "minLength": 2,
      "maxLength": 3,
      "metadata": {
        "description": "Two to three character value that identifies the region into which the resources are deployed. Should map to the resource group's location."
      }
    },
    "hostingPlanSKUName": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "S1",
        "S2",
        "S3",
        "P1",
        "P2",
        "P3",
        "P4"
      ],
      "metadata": {
        "description": "Describes plan's pricing tier and instance size. Check details at https://azure.microsoft.com/en-us/pricing/details/app-service/"
      }
    },
    "hostingPlanSKUCapacity": {
      "type": "int",
      "defaultValue": 1,
      "minValue": 1,
      "metadata": {
        "description": "Describes plan's instance count"
      }
    },
    "databaseLoginName": {
      "type": "string"
    },
    "databaseLoginPassword": {
      "type": "securestring"
    },
    "databaseName": {
      "type": "string"
    },
    "databaseCollation": {
      "type": "string",
      "defaultValue": "SQL_Latin1_General_CP1_CI_AS"
    },
    "databaseEdition": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard",
        "Premium"
      ]
    },
    "databaseMaxSizeBytes": {
      "type": "string",
      "defaultValue": "1073741824"
    },
    "databaseSKUName": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Describes the SKU name category, Basic, Standard, Premium"
      }
    },
    "databaseSKUTier": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Basic",
        "S0",
        "S1",
        "S2",
        "P1",
        "P2",
        "P3"
      ],
      "metadata": {
        "description": "Describes the SKU tier"
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ]
    },
    "storageAccountTier": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [
        "Standard"
      ]
    },
    "userPrincipalLogin": {
      "type": "string",
      "metadata": {
        "description": "login nameof the AAD user that will have admin access to SQL server and the Key Vault. "
      }
    },
    "userPrincipalId": {
      "type": "string",
      "metadata": {
        "description": "Object Id of the AAD user that will have admin access to the SQL server and the Key Vault. Available from the Get-AzureRMADUser or the Get-AzureRMADServicePrincipal cmdlets"
      }
    },
    //"azureDevOpsPrincipalId": {
    //  "type": "string",
    //  "metadata": {
    //    "description": "Object Id of the service principal that will have Azure DevOps access to the vault. Available from the Get-AzureRMADUser or the Get-AzureRMADServicePrincipal cmdlets"
    //  }
    //},
    //"integrationTestsPrincipalId": {
    //  "type": "string",
    //  "metadata": {
    //    "description": "Object Id of the service principal that is used to run integration tests. Available from the Get-AzureRMADUser or the Get-AzureRMADServicePrincipal cmdlets"
    //  }
    //},
    "redisCacheSKUName": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard"
      ],
      "defaultValue": "Standard"
    },
    "redisCacheSKUFamily": {
      "type": "string",
      "allowedValues": [
        "C"
      ],
      "defaultValue": "C"
    },
    "redisCacheSKUCapacity": {
      "type": "int",
      "allowedValues": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "defaultValue": 0
    },
    "redisCacheRedisVersion": {
      "type": "string",
      "allowedValues": [
        "2.8"
      ],
      "defaultValue": "2.8"
    }
  },
  "variables": {
    "serviceAPIName": "[concat(parameters('appPrefix'), '-', parameters('environment'), '-', parameters('locationShort'), '-service')]",
    "webSiteName": "[concat(parameters('appPrefix'), '-', parameters('environment'), '-', parameters('locationShort'), '-web')]",
    "sqlserverName": "[concat(parameters('appPrefix'), '-', parameters('environment'), '-', parameters('locationShort'), '-sqlserver')]",
    "hostingPlanName": "[concat(parameters('appPrefix'), '-', parameters('environment'), '-', parameters('locationShort'), '-hostingplan')]",
    "storageAccountName": "[concat(parameters('appPrefix'), parameters('environment'), parameters('locationShort'), 'storage')]",
    "applicationInsightsName": "[concat(parameters('appPrefix'), '-', parameters('environment'), '-', parameters('locationShort'), '-appinsights')]",
    "redisCacheName": "[concat(parameters('appPrefix'), '-', parameters('environment'), '-', parameters('locationShort'), '-redis')]"
  },
  "resources": [
    {
      "name": "[variables('sqlserverName')]",
      "type": "Microsoft.Sql/servers",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "SqlServer"
      },
      "apiVersion": "2014-04-01-preview",
      "properties": {
        "administratorLogin": "[parameters('databaseLoginName')]",
        "administratorLoginPassword": "[parameters('databaseLoginPassword')]"
      },
      "resources": [
        {
          "name": "[parameters('databaseName')]",
          "type": "databases",
          "location": "[resourceGroup().location]",
          "tags": {
            "displayName": "Database"
          },
          "apiVersion": "2017-10-01-preview",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqlserverName'))]"
          ],
          "sku": {
            "name": "[parameters('databaseSKUName')]",
            "tier": "[parameters('databaseSKUTier')]"
          },
          "properties": {
            "edition": "[parameters('databaseEdition')]",
            "collation": "[parameters('databaseCollation')]",
            "maxSizeBytes": "[parameters('databaseMaxSizeBytes')]"
          },
          "resources": [
            {
              "type": "Microsoft.Sql/servers/databases/advisors",
              "name": "[concat(variables('sqlserverName'), '/', parameters('databaseName'), '/', 'ForceLastGoodPlan')]",
              "apiVersion": "2014-04-01",
              "properties": {
                "autoExecuteValue": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]",
                "[parameters('databaseName')]",
                "[resourceId('Microsoft.Sql/servers/advisors', variables('sqlserverName'), 'ForceLastGoodPlan')]"
              ],
              "tags": {
                "displayName": "SqlServer database ForceLastGoodPlan Advisor setting"
              }
            },
            {
              "type": "Microsoft.Sql/servers/databases/advisors",
              "name": "[concat(variables('sqlserverName'), '/', parameters('databaseName'), '/', 'CreateIndex')]",
              "apiVersion": "2014-04-01",
              "properties": {
                "autoExecuteValue": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]",
                "[parameters('databaseName')]",
                "ForceLastGoodPlan"
              ],
              "tags": {
                "displayName": "SqlServer database CreateIndex Advisor setting"
              }
            },
            {
              "type": "Microsoft.Sql/servers/databases/advisors",
              "name": "[concat(variables('sqlserverName'), '/', parameters('databaseName'), '/', 'DropIndex')]",
              "apiVersion": "2014-04-01",
              "properties": {
                "autoExecuteValue": "Enabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]",
                "[parameters('databaseName')]",
                "CreateIndex"
              ],
              "tags": {
                "displayName": "SqlServer database DropIndex Advisor setting"
              }
            }
          ]
        },
        {
          "type": "firewallrules",
          "name": "AllowAllWindowsAzureIps",
          "apiVersion": "2014-04-01",
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqlserverName'))]"
          ],
          "location": "[resourceGroup().location]",
          "properties": {
            "endIpAddress": "0.0.0.0",
            "startIpAddress": "0.0.0.0"
          }
        },
        {
          "type": "administrators",
          "name": "activeDirectory",
          "apiVersion": "2014-04-01",
          //"tags": {
          //  "displayName": "SqlService AD Administrator"
          //},
          "properties": {
            "administratorType": "ActiveDirectory",
            "login": "[parameters('userPrincipalLogin')]",
            "sid": "[parameters('userPrincipalId')]",
            "tenantId": "[subscription().tenantid]"
          },
          "dependsOn": [
            "[concat('Microsoft.Sql/servers/', variables('sqlserverName'))]"
          ]
        },
        {
          "type": "Microsoft.Sql/servers/advisors",
          "name": "[concat(variables('sqlserverName'), '/', 'ForceLastGoodPlan')]",
          "apiVersion": "2014-04-01",
          "properties": {
            "autoExecuteValue": "Enabled"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]",
            "[parameters('databaseName')]"
          ],
          "tags": {
            "displayName": "SqlServer ForceLastGoodPlan Advisor setting"
          }
        },
        {
          "type": "Microsoft.Sql/servers/advisors",
          "name": "[concat(variables('sqlserverName'), '/', 'CreateIndex')]",
          "apiVersion": "2014-04-01",
          "properties": {
            "autoExecuteValue": "Enabled"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]",
            "ForceLastGoodPlan"
          ],
          "tags": {
            "displayName": "SqlServer CreateIndex Advisor setting"
          }
        },
        {
          "type": "Microsoft.Sql/servers/advisors",
          "name": "[concat(variables('sqlserverName'), '/', 'DropIndex')]",
          "apiVersion": "2014-04-01",
          "properties": {
            "autoExecuteValue": "Enabled"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]",
            "CreateIndex"
          ],
          "tags": {
            "displayName": "SqlServer DropIndex Advisor setting"
          }
        },
        {
          "type": "auditingSettings",
          "name": "AuditingSettings",
          "apiVersion": "2017-03-01-preview",
          "dependsOn": [
            "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
          ],
          "properties": {
            "state": "Enabled",
            "storageEndpoint": "[concat('https://', variables('storageAccountName'), '.blob.core.windows.net')]",
            "storageAccountAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]",
            "retentionDays": "180",
            "storageAccountSubscriptionId": "[subscription().subscriptionId]",
            "isStorageSecondaryKeyInUse": false,
            "auditActionsAndGroups": [
              "SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP",
              "FAILED_DATABASE_AUTHENTICATION_GROUP",
              "BATCH_COMPLETED_GROUP"
            ],
            "isAzureMonitorTargetEnabled": false
          }
        }
        //{
        //  "type": "Microsoft.Sql/servers/auditingPolicies",
        //  "apiVersion": "2017-03-01-preview",
        //  "name": "[concat(variables('sqlserverName'), '/Default')]",
        //  "location": "[resourceGroup().location]",
        //  "dependsOn": [
        //    "[resourceId('Microsoft.Sql/servers', variables('sqlserverName'))]"
        //  ],
        //  "properties": {
        //    "auditingState": "New",
        //    "eventTypesToAudit": "PlainSQL_Success,PlainSQL_Failure,ParameterizedSQL_Success,ParameterizedSQL_Failure,StoredProcedure_Success,StoredProcedure_Failure,Login_Success,Login_Failure,TransactionManagement_Success,TransactionManagement_Failure",
        //    "fullAuditLogsTableName": "SQLDBAuditLogsSamsappdeveusqlserver",
        //    "auditLogsTableName": "Samsappdeveusqlserver",
        //    "retentionDays": "180"
        //  }
        //}
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-07-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Storage Account"
      },
      "sku": {
        "name": "[parameters('storageAccountType')]",
        "tier": "[parameters('storageAccountTier')]"
      },
      "kind": "Storage",
      "properties": {
        "azureFilesAadIntegration": false,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "name": "[variables('applicationInsightsName')]",
      "type": "Microsoft.Insights/components",
      "location": "[resourceGroup().location]",
      "apiVersion": "2014-04-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('webSiteName'))]"
      ],
      "tags": {
        "displayName": "Application Insights"
      },
      "properties": {
        "applicationId": "[resourceId('Microsoft.Web/sites', variables('webSiteName'))]"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('hostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "Hosting Plan"
      },
      "sku": {
        "name": "[parameters('hostingPlanSKUName')]",
        "capacity": "[parameters('hostingPlanSKUCapacity')]"
      },
      "properties": {
        "name": "[variables('hostingPlanName')]"
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat(variables('hostingPlanName'), '-', resourceGroup().name)]",
      "type": "Microsoft.Insights/autoscalesettings",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "Resource",
        "displayName": "Hosting Plan Auto Scale Settings"
      },
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      ],
      "properties": {
        "profiles": [
          {
            "name": "Default",
            "capacity": {
              "minimum": 1,
              "maximum": 2,
              "default": 1
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT10M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80.0
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT10M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "CpuPercentage",
                  "metricResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT1H",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 60.0
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": 1,
                  "cooldown": "PT1H"
                }
              }
            ]
          }
        ],
        "enabled": true,
        "name": "[concat(variables('hostingPlanName'), '-', resourceGroup().name)]",
        "targetResourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('CPUHigh ', variables('hostingPlanName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "Resource",
        "displayName": "Hosting Plan CPU High Alert Rule"
      },
      "properties": {
        "name": "[concat('CPUHigh ', variables('hostingPlanName'))]",
        "description": "[concat('The average CPU is high across all the instances of ', variables('hostingPlanName'))]",
        "isEnabled": true,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]",
            "metricName": "CpuPercentage"
          },
          "operator": "GreaterThan",
          "threshold": 90,
          "windowSize": "PT15M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('LongHttpQueue ', variables('hostingPlanName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "Resource",
        "displayName": "Hosting Plan Auto Scale Settings Alert Rule"
      },
      "properties": {
        "name": "[concat('LongHttpQueue ', variables('hostingPlanName'))]",
        "description": "[concat('The HTTP queue for the instances of ', variables('hostingPlanName'), ' has a large number of pending requests.')]",
        "isEnabled": true,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]",
            "metricName": "HttpQueueLength"
          },
          "operator": "GreaterThan",
          "threshold": 100.0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "name": "[concat('LongHttpQueue ', variables('applicationInsightsName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "apiVersion": "2014-04-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName')))]": "Resource",
        "displayName": "Hosting Plan Long Http Queue Alert Rule"
      },
      "properties": {
        "name": "[concat('LongHttpQueue ', variables('hostingPlanName'))]",
        "description": "[concat('The HTTP queue for the instances of ', variables('hostingPlanName'), ' has a large number of pending requests.')]",
        "isEnabled": false,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
            "metricName": "HttpQueueLength"
          },
          "operator": "GreaterThan",
          "threshold": 100,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('serviceAPIName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[concat('Microsoft.Web/serverFarms/', variables('hostingPlanName'))]"
      ],
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "empty",
        "displayName": "Web Service Webapp"
      },
      "properties": {
        "name": "[variables('serviceAPIName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "httpsOnly": true
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "type": "config",
          "name": "connectionstrings",
          "dependsOn": [
            "[concat('Microsoft.Web/Sites/', variables('serviceAPIName'))]"
          ],
          "properties": {
            "DefaultConnection": {
              "value": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', parameters('databaseName'), ';User Id=', parameters('databaseLoginName'), '@', variables('sqlserverName'), ';Password=', parameters('databaseLoginPassword'), ';')]",
              "type": "SQLServer"
            }
          }
        },
        {
          "apiVersion": "2015-08-01",
          "type": "slots",
          "name": "Staging",
          "dependsOn": [
            "[concat('Microsoft.Web/Sites/', variables('serviceAPIName'))]"
          ],
          "location": "[resourceGroup().location]",
          "properties": {

          }
        }
      ]
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('ServerErrors ', variables('serviceAPIName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Web/sites/', variables('serviceAPIName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('serviceAPIName'))]": "Resource",
        "displayName": "Web Service Server Errors Alert Rule"
      },
      "properties": {
        "name": "[concat('ServerErrors ', variables('serviceAPIName'))]",
        "description": "[concat(variables('serviceAPIName'), ' has some server errors, status code 5xx.')]",
        "isEnabled": true,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('serviceAPIName'))]",
            "metricName": "Http5xx"
          },
          "operator": "GreaterThan",
          "threshold": 3.0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('ForbiddenRequests ', variables('serviceAPIName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Web/sites/', variables('serviceAPIName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('serviceAPIName'))]": "Resource",
        "displayName": "Web Service Forbidden Requests Alert Rule"
      },
      "properties": {
        "name": "[concat('ForbiddenRequests ', variables('serviceAPIName'))]",
        "description": "[concat(variables('serviceAPIName'), ' has some requests that are forbidden, status code 403.')]",
        "isEnabled": true,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('serviceAPIName'))]",
            "metricName": "Http403"
          },
          "operator": "GreaterThan",
          "threshold": 0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('webSiteName')]",
      "type": "Microsoft.Web/sites",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[concat('Microsoft.Web/serverFarms/', variables('hostingPlanName'))]"
      ],
      "tags": {
        "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "empty",
        "displayName": "Website Webapp"
      },
      "properties": {
        "name": "[variables('webSiteName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "httpsOnly": true
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "type": "config",
          "name": "connectionstrings",
          "dependsOn": [
            "[concat('Microsoft.Web/Sites/', variables('webSiteName'))]"
          ],
          "properties": {
            "DefaultConnection": {
              "value": "[concat('Data Source=tcp:', reference(concat('Microsoft.Sql/servers/', variables('sqlserverName'))).fullyQualifiedDomainName, ',1433;Initial Catalog=', parameters('databaseName'), ';User Id=', parameters('databaseLoginName'), '@', variables('sqlserverName'), ';Password=', parameters('databaseLoginPassword'), ';')]",
              "type": "SQLServer"
            }
          }
        },
        {
          "apiVersion": "2015-08-01",
          "type": "slots",
          "name": "Staging",
          "dependsOn": [
            "[concat('Microsoft.Web/Sites/', variables('webSiteName'))]"
          ],
          "location": "[resourceGroup().location]",
          "properties": {

          }
        }
      ]
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('ServerErrors ', variables('webSiteName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Web/sites/', variables('webSiteName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]": "Resource",
        "displayName": "Website Server Errors Alert Rule"
      },
      "properties": {
        "name": "[concat('ServerErrors ', variables('webSiteName'))]",
        "description": "[concat(variables('webSiteName'), ' has some server errors, status code 5xx.')]",
        "isEnabled": true,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]",
            "metricName": "Http5xx"
          },
          "operator": "GreaterThan",
          "threshold": 3.0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "apiVersion": "2014-04-01",
      "name": "[concat('ForbiddenRequests ', variables('webSiteName'))]",
      "type": "Microsoft.Insights/alertrules",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Web/sites/', variables('webSiteName'))]"
      ],
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]": "Resource",
        "displayName": "Website Forbidden Requests Alert Rule"
      },
      "properties": {
        "name": "[concat('ForbiddenRequests ', variables('webSiteName'))]",
        "description": "[concat(variables('webSiteName'), ' has some requests that are forbidden, status code 403.')]",
        "isEnabled": true,
        "condition": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition",
          "dataSource": {
            "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource",
            "resourceUri": "[concat(resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('webSiteName'))]",
            "metricName": "Http403"
          },
          "operator": "GreaterThan",
          "threshold": 0,
          "windowSize": "PT5M"
        },
        "action": {
          "odata.type": "Microsoft.Azure.Management.Insights.Models.RuleEmailAction",
          "sendToServiceOwners": true,
          "customEmails": []
        }
      }
    },
    {
      "name": "[variables('redisCacheName')]",
      "type": "Microsoft.Cache/Redis",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-04-01",
      "dependsOn": [],
      "tags": {
        "displayName": "Redis Cache"
      },
      "properties": {
        "sku": {
          "name": "[parameters('redisCacheSKUName')]",
          "family": "[parameters('redisCacheSKUFamily')]",
          "capacity": "[parameters('redisCacheSKUCapacity')]"
        },
        "redisVersion": "[parameters('redisCacheRedisVersion')]"
      }
    }
  ],
  "outputs": {
    "servicePrincipalId": {
      "type": "string",
      "value": "[reference(concat(resourceId('Microsoft.Web/sites', variables('serviceAPIName')), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').principalId]"
    },
    "websitePrincipalId": {
      "type": "string",
      "value": "[reference(concat(resourceId('Microsoft.Web/sites', variables('webSiteName')), '/providers/Microsoft.ManagedIdentity/Identities/default'), '2015-08-31-PREVIEW').principalId]"
    },
    "applicationInsightsResourceNameOutput": {
      "type": "string",
      "value": "[variables('applicationInsightsName')]"
    },
    "applicationInsightsInstrumentationKeyOutput": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', variables('applicationInsightsName')), '2014-04-01').InstrumentationKey]"
    },
    "storageAccountKeyOutput": {
      "type": "string",
      "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value]"
    },
    "redisConnectionStringOutput": {
      "type": "string",
      "value": "[concat(variables('redisCacheName'), '.redis.cache.windows.net:6380,password=',listKeys(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2016-04-01').primaryKey,',ssl=True,abortConnect=False')]"
    }
  }
}