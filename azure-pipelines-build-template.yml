parameters: # defaults for any parameters that aren't specified
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  vmImage: 'vs2017-win2016'

jobs:
  - job: Build
    displayName: 'Build job'
    pool:
      vmImage: ${{parameters.vmImage}}
    steps:
    # DotNet Framework build items
    - task: NuGetToolInstaller@0
      displayName: 'Use NuGet 4.4.1'
      inputs:
        versionSpec: 4.4.1

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        projects: |
         SamLearnsAzure/SamLearnsAzure.Database/SamLearnsAzure.Database.sqlproj
        vstsFeed: '030a758a-428f-4445-bce8-2c19ad9a56b3'

    - task: VSBuild@1
      displayName: 'Build database project'
      inputs:
        platform: '${{parameters.buildPlatform}}'
        configuration: '${{parameters.buildConfiguration}}'
        solution: SamLearnsAzure/SamLearnsAzure.Database/SamLearnsAzure.Database.sqlproj

    - task: CopyFiles@2
      displayName: 'Copy database files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)\SamLearnsAzure\SamLearnsAzure.Database\bin\Output'
        Contents: '*' # * = Copy all files in the current directory
        TargetFolder: '$(build.artifactstagingdirectory)\Database'

    - task: CopyFiles@2
      displayName: 'Copy environment ARM template files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)\SamLearnsAzure\SamLearnsAzure.Environment.ARMTemplate'
        Contents: '**\*' # **\* = Copy all files and all files in sub directories
        TargetFolder: '$(build.artifactstagingdirectory)\EnvironmentARMTemplate'

    # Dotnet Core build items
    - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
      displayName: 'Prepare analysis on SonarCloud'
      inputs:
        SonarCloud: 'SonarQube connection'
        organization: samsmithnz
        projectKey: SamLearnsAzure

    - task: DotNetCoreCLI@2
      displayName: 'Restore dotnet core projects'
      inputs:
        command: restore
        projects: |
         SamLearnsAzure/SamLearnsAzure.Service/SamLearnsAzure.Service.csproj
         SamLearnsAzure/SamLearnsAzure.Web/SamLearnsAzure.Web.csproj
         SamLearnsAzure/SamLearnsAzure.Tests/SamLearnsAzure.Tests.csproj
         SamLearnsAzure/SamLearnsAzure.FunctionalTests/SamLearnsAzure.FunctionalTests.csproj
#SamLearnsAzure/SamLearnsAzure.SetImageSearch.Function/SamLearnsAzure.SetImageSearch.Function.csproj

    - task: DotNetCoreCLI@2
      displayName: 'Build dotnet core projects'
      inputs:
        command: build
        projects: |
         SamLearnsAzure/SamLearnsAzure.Service/SamLearnsAzure.Service.csproj
         SamLearnsAzure/SamLearnsAzure.Web/SamLearnsAzure.Web.csproj
         SamLearnsAzure/SamLearnsAzure.Tests/SamLearnsAzure.Tests.csproj
         SamLearnsAzure/SamLearnsAzure.FunctionalTests/SamLearnsAzure.FunctionalTests.csproj
#SamLearnsAzure/SamLearnsAzure.SetImageSearch.Function/SamLearnsAzure.SetImageSearch.Function.csproj
        arguments: '--configuration ${{parameters.buildConfiguration}}'

    - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
      displayName: 'Run Code Analysis on SonarCloud'

    - task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
      displayName: 'Publish Quality Gate Result on SonarCloud'
 
    - task: DotNetCoreCLI@2
      displayName: 'Test dotnet code projects'
      inputs:
        command: test
        projects: |
         SamLearnsAzure/SamLearnsAzure.Tests/SamLearnsAzure.Tests.csproj
        arguments: '--configuration ${{parameters.buildConfiguration}} --logger trx --collect "Code coverage" --settings:$(Build.SourcesDirectory)\SamLearnsAzure\SamLearnsAzure.Tests\CodeCoverage.runsettings'

    - task: DotNetCoreCLI@2
      displayName: 'Publish dotnet core projects'
      inputs:
        command: publish
        publishWebProjects: false
        projects: |
         SamLearnsAzure/SamLearnsAzure.Service/SamLearnsAzure.Service.csproj
         SamLearnsAzure/SamLearnsAzure.Web/SamLearnsAzure.Web.csproj
 #SamLearnsAzure/SamLearnsAzure.SetImageSearch.Function/SamLearnsAzure.SetImageSearch.Function.csproj
        arguments: '--configuration ${{parameters.buildConfiguration}} --output $(build.artifactstagingdirectory)'
        zipAfterPublish: true

    - task: DotNetCoreCLI@2
      displayName: 'Publish dotnet core functional tests project'
      inputs:
        command: publish
        publishWebProjects: false
        projects: |
         SamLearnsAzure/SamLearnsAzure.FunctionalTests/SamLearnsAzure.FunctionalTests.csproj
        arguments: '--configuration ${{parameters.buildConfiguration}} --output $(build.artifactstagingdirectory)/FunctionalTests'
        zipAfterPublish: false

    - task: CopyFiles@2
      displayName: 'Copy Selenium Files to: $(build.artifactstagingdirectory)/FunctionalTests/SamLearnsAzure.FunctionalTests'
      inputs:
        SourceFolder: 'SamLearnsAzure/SamLearnsAzure.FunctionalTests/bin/${{parameters.buildConfiguration}}/netcoreapp2.1'
        Contents: '*chromedriver.exe*'
        TargetFolder: '$(build.artifactstagingdirectory)/FunctionalTests/SamLearnsAzure.FunctionalTests'

    # Publish the artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'

    # Run security tasks
    - task: ms-codeanalysis.vss-microsoft-security-code-analysis.build-task-credscan.CredScan@2
      displayName: 'Run CredScan'
    #- task: ms-codeanalysis.vss-microsoft-security-code-analysis.build-task-postanalysis.PostAnalysis@1
    #  displayName: 'Post Analysis'
    #  inputs:
    #    CredScan: true