parameters: # defaults for any parameters that aren't specified
  applicationInsightsApiKey: '$(ApplicationInsights--ApplicationIdDev)'
  applicationInsightsApplicationId: '$(ApplicationInsights--ApplicationIdDev)'
  applicationInsightsInstrumentationKey: $(ApplicationInsights--InstrumentationKeyDev)
  applicationInsightsLocation: 'East US'
  appServiceContributerClientSecret: '***secret'
  ASPNETCOREEnvironmentSetting: 'Release'
  cognitiveServicesSubscriptionKey: '***secret'
  environment: 'Dev'  
  environmentLowercase: 'dev'
  databaseLoginName: '***secret'
  databaseLoginPassword: '***secret'
  databaseServerName: 'samsapp-dev-eu-sqlserver'
  godaddy_key: '***secret'
  godaddy_secret: '***secret'
  keyVaultName: 'samsapp-data-eu-keyvault'
  keyVaultURL: 'https://samsapp-data-eu-keyvault.vault.azure.net/'
  keyVaultClientId: '***secret'
  keyVaultClientSecret: '***secret'
  letsEncryptUniqueRoleAssignmentGuid: '6e4cff57-e63a-403e-822c-e98e5ba02145'
  imagesStorageCDNURL: 'https://samsapp-dev-eu-cdnendpoint.azureedge.net/partimages'
  imagesStorageURL: 'https://samsappdeveustorage.blob.core.windows.net/partimages'
  partImagesContainerName: 'partimages'
  setImagesContainerName: 'setimages'
  redisCacheConnectionString: '***secret'
  resourceGroupName: 'SamLearnsAzureDev'
  resourceGroupLocation: 'East US'
  resourceGroupLocationShort: 'eu'
  roleAssignmentId: 'b24988ac-6180-42a0-ab88-20f7382dd24c'
  samsAppConnectionString: '***secret'
  serviceName: 'samsapp-dev-eu-service'
  serviceStagingUrl: 'https://samsapp-dev-eu-service-staging.azurewebsites.net/'
  serviceUrl: 'https://samsapp-dev-eu-service.azurewebsites.net/'
  stagingSlotName: 'Staging'
  storageAccountName: 'samsappdeveustorage'
  storageAccountKey: '***secret'
  userPrincipalLogin: '***secret'
  vmImage: 'windows-latest'
  websiteName: 'samsapp-dev-eu-web'
  websiteDomainName: 'dev.samlearnsazure.com'
  websiteStagingUrl: 'https://samsapp-dev-eu-web-staging.azurewebsites.net/'
  websiteUrl: 'https://samsapp-dev-eu-web.azurewebsites.net/'
 
jobs:
  - deployment: DeployInfrastructure
    displayName: "Deploy infrastructure to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    pool:
      vmImage: "windows-latest"    
    variables:
      ApplicationInsights.InstrumentationKey: ${{parameters.applicationInsightsInstrumentationKey}}
      AppSettings.Environment: ${{parameters.environment}}
      AppSettings.KeyVaultURL: ${{parameters.keyVaultURL}}
      AppSettings.ImagesStorageCDNURL: ${{parameters.imagesStorageCDNURL}}
      AppSettings.ImagesStorageURL: ${{parameters.imagesStorageURL}}
      AppSettings.PartImagesContainerName: ${{parameters.partImagesContainerName}}
      AppSettings.SetImagesContainerName: ${{parameters.setImagesContainerName}}
      AppSettings.RedisCacheConnectionString: ${{parameters.redisCacheConnectionString}}
      AppSettings.WebServiceURL: ${{parameters.serviceURL}}
      AppSettings.StorageAccountName: ${{parameters.storageAccountName}}
      AppSettings.CognitiveServicesSubscriptionKey: ${{parameters.cognitiveServicesSubscriptionKey}}
      AppSettings.CaptureStartErrors: ${{parameters.captureStartErrors}}
      ConnectionStrings.SamsAppConnectionString: ${{parameters.samsAppConnectionString}} 
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download the build artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(build.artifactstagingdirectory)'
          - task: dutchworkz.DisplayAllVariables.DisplayAllVariables.DutchWorkzToolsAllVariables@1
            displayName: 'Show all build variables in build output.'
          - task: PowerShell@2
            displayName: 'Set CName DNS entries in GoDaddy'
            inputs:
              targetType: FilePath
              filePath: '$(build.artifactstagingdirectory)/drop/EnvironmentARMTemplate/PowerShell/GoDaddyDNSSetup.ps1'
              arguments: '-godaddy_domain "samlearnsazure.com" -godaddy_name "${{parameters.environmentLowercase}}" -godaddy_destination "${{parameters.websiteName}}.azurewebsites.net" -godaddy_type "CNAME" -godaddy_key "${{parameters.godaddy_key}}" -godaddy_secret "${{parameters.godaddy_secret}}"'
            continueOnError: true # GoDaddy is not essential, and seems to have some reliability issues, so marking this to continue on any errors
          - task: AzurePowerShell@4 
            displayName: 'Run Azure PowerShell to remove deployments older than 30 days' #This addresses a deployment quota limit: https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/deployment-quota-exceeded
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              ScriptPath: '$(build.artifactstagingdirectory)/drop/EnvironmentARMTemplate/PowerShell/DeploymentCleanup.ps1'
              ScriptArguments: '-ResourceGroupName "${{parameters.resourceGroupName}}"'
              azurePowerShellVersion: LatestVersion
          - task: AzureCLI@2
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: | 
                $appPrefix = "samsapp"
                $environment = "${{parameters.environmentLowercase}}"
                $location = "${{parameters.resourceGroupLocation}}" 
                $locationShort = "${{parameters.resourceGroupLocationShort}}"                
                $storageAccountName = "$appPrefix$environment$($locationShort)storage"                
                az group create --name "${{parameters.resourceGroupName}}" --location $location 
                az deployment group create --resource-group "${{parameters.resourceGroupName}}" --name $storageAccountName --template-file "$(build.artifactstagingdirectory)/drop/EnvironmentARMTemplate/Templates/AzureStorage.json" --parameters storageAccountName=$storageAccountName
                
          #- task: AzureResourceGroupDeployment@2
          #  displayName: 'Azure Deployment: Deploy ARM Template to resource group'
          #  inputs:
          #    azureSubscription: 'SamLearnsAzure connection to Azure Portal'
          #    resourceGroupName: '${{parameters.resourceGroupName}}'
          #    location: '${{parameters.resourceGroupLocation}}'
          #    csmFile: '$(build.artifactstagingdirectory)/drop/EnvironmentARMTemplate/azuredeploy.json'
          #    csmParametersFile: '$(build.artifactstagingdirectory)/drop/EnvironmentARMTemplate/azuredeploy.parameters.json'
          #    overrideParameters: '-userPrincipalLogin ${{parameters.userPrincipalLogin}} -databaseLoginName ${{parameters.databaseLoginName}} -databaseLoginPassword ${{parameters.databaseLoginPassword}} -environment ${{parameters.environmentLowercase}} -locationShort ${{parameters.resourceGroupLocationShort}}  -appServiceContributerClientSecret "${{parameters.appServiceContributerClientSecret}}" -websiteDomainName ${{parameters.websiteDomainName}} -roleAssignmentId ${{parameters.roleAssignmentId}} -letsEncryptUniqueRoleAssignmentGuid ${{parameters.letsEncryptUniqueRoleAssignmentGuid}}'
          #- task: keesschollaart.arm-outputs.arm-outputs.ARM Outputs@5
          #  displayName: 'Extract ARM template outputs to pipeline variables'
          #  inputs:
          #    ConnectedServiceNameARM: 'SamLearnsAzure connection to Azure Portal'
          #    resourceGroupName: ${{parameters.resourceGroupName}}
          #- task: AzurePowerShell@4 #Note that pipeline variables servicePrincipalId, websitePrincipalId, applicationInsightsInstrumentationKeyOutput, storageAccountKeyOutput, DatabaseLoginPassword, redisConnectionStringOutput are populated from the previous output task
          #  displayName: 'Run Azure PowerShell to setup KeyVault with ARM template output variables'
          #  inputs:
          #    azureSubscription: 'SamLearnsAzure connection to Azure Portal'
          #    ScriptPath: '$(build.artifactstagingdirectory)/drop/EnvironmentARMTemplate/PowerShell/KeyVault.ps1'
          #    ScriptArguments: '-KeyVaultName "${{parameters.KeyVaultName}}" -Environment "${{parameters.Environment}}" -ServicePrincipalId "$(servicePrincipalId)" -ServiceStagingSlotPrincipalId "$(serviceStagingSlotPrincipalId)" -WebsitePrincipalId "$(websitePrincipalId)" -WebsiteStagingSlotPrincipalId "$(websiteStagingSlotPrincipalId)" -ApplicationInsightsInstrumentationKey "$(applicationInsightsInstrumentationKeyOutput)" -StorageAccountKey "$(storageAccountKeyOutput)" -DatabaseServerName "${{parameters.DatabaseServerName}}" -DatabaseLoginName "${{parameters.DatabaseLoginName}}" -DatabaseLoginPassword "${{parameters.DatabaseLoginPassword}}" -RedisConnectionString "$(redisConnectionStringOutput)"'
          #    azurePowerShellVersion: LatestVersion


  - deployment: DeployDatabase
    displayName: "Deploy database to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    dependsOn: DeployInfrastructure
    pool:
      vmImage: ${{parameters.vmImage}}        
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download the build artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(build.artifactstagingdirectory)'
          - task: AzurePowerShell@4
            displayName: 'Reload the database from the latest backup, if needed'
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              ScriptPath: '$(build.artifactstagingdirectory)/drop/EnvironmentARMTemplate/PowerShell/ImportBACPAC.ps1'
              ScriptArguments: '-ResourceGroupName ${{parameters.resourceGroupName}} -DBServerName ${{parameters.databaseServerName}} -ServerAdmin ${{parameters.databaseLoginName}} -ServerPassword ${{parameters.databaseLoginPassword}} -DatabaseName "samsdb" -StorageAccountName "samsappprodeustorage" -StorageUri "https://samsappprodeustorage.blob.core.windows.net/" -StorageAccountKey ${{parameters.storageAccountKey}} -StorageContainerName "bacpacs" -Edition "Basic" -ServiceObjectiveName "Basic" -RunImportAlways $false'
              azurePowerShellVersion: LatestVersion
          - task: SqlAzureDacpacDeployment@1
            displayName: 'Azure SQL dacpac publish'
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              ServerName: '${{parameters.databaseServerName}}.database.windows.net'
              DatabaseName: samsdb
              SqlUsername: '${{parameters.databaseLoginName}}'
              SqlPassword: '${{parameters.databaseLoginPassword}}'
              DacpacFile: '$(build.artifactstagingdirectory)/drop/Database/SamLearnsAzure.Database.dacpac'
              additionalArguments: '/p:BlockOnPossibleDataLoss=true'

  - deployment: DeployWebServiceApp
    displayName: "Deploy webservice app to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    dependsOn: DeployInfrastructure
    pool:
      vmImage: ${{parameters.vmImage}}        
    variables:
      ApplicationInsights.InstrumentationKey: ${{parameters.applicationInsightsInstrumentationKey}}
      AppSettings.Environment: ${{parameters.environment}}
      AppSettings.KeyVaultURL: ${{parameters.keyVaultURL}}
      AppSettings.ImagesStorageCDNURL: ${{parameters.imagesStorageCDNURL}}
      AppSettings.ImagesStorageURL: ${{parameters.imagesStorageURL}}
      AppSettings.PartImagesContainerName": ${{parameters.partImagesContainerName}}
      AppSettings.SetImagesContainerName": ${{parameters.setImagesContainerName}}
      AppSettings.RedisCacheConnectionString: ${{parameters.redisCacheConnectionString}}
      AppSettings.WebServiceURL: ${{parameters.serviceURL}}
      AppSettings.StorageAccountName: ${{parameters.storageAccountName}}
      AppSettings.CognitiveServicesSubscriptionKey: ${{parameters.cognitiveServicesSubscriptionKey}}
      AppSettings.CaptureStartErrors: ${{parameters.captureStartErrors}}
      ConnectionStrings.SamsAppConnectionString: ${{parameters.samsAppConnectionString}} 
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download the build artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(build.artifactstagingdirectory)'
          - task: AzureRmWebAppDeployment@3
            displayName: 'Azure App Service Deploy: web service'
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              WebAppName: '${{parameters.serviceName}}'
              DeployToSlotFlag: true
              ResourceGroupName: '${{parameters.resourceGroupName}}'
              SlotName: '${{parameters.stagingSlotName}}'
              Package: '$(build.artifactstagingdirectory)/drop/SamLearnsAzure.Service.zip'
              RemoveAdditionalFilesFlag: true
              TakeAppOfflineFlag: true
              JSONFiles: '**/appsettings.json'
              AppSettings: '-ASPNETCORE_ENVIRONMENT "${{parameters.ASPNETCOREEnvironmentSetting}}"'
              ConfigurationSettings: '-ApplicationInsights.InstrumentationKey $(applicationInsightsInstrumentationKeyOutput)'

  - deployment: DeployWebsiteApp
    displayName: "Deploy website app to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    dependsOn: DeployInfrastructure
    pool:
      vmImage: ${{parameters.vmImage}}        
    variables:
      ApplicationInsights.InstrumentationKey: ${{parameters.applicationInsightsInstrumentationKey}}
      AppSettings.Environment: ${{parameters.environment}}
      AppSettings.KeyVaultURL: ${{parameters.keyVaultURL}}
      AppSettings.ImagesStorageCDNURL: ${{parameters.imagesStorageCDNURL}}
      AppSettings.ImagesStorageURL: ${{parameters.imagesStorageURL}}
      AppSettings.PartImagesContainerName": ${{parameters.partImagesContainerName}}
      AppSettings.SetImagesContainerName": ${{parameters.setImagesContainerName}}
      AppSettings.RedisCacheConnectionString: ${{parameters.redisCacheConnectionString}}
      AppSettings.WebServiceURL: ${{parameters.serviceURL}}
      AppSettings.StorageAccountName: ${{parameters.storageAccountName}}
      AppSettings.CognitiveServicesSubscriptionKey: ${{parameters.cognitiveServicesSubscriptionKey}}
      AppSettings.CaptureStartErrors: ${{parameters.captureStartErrors}}
      ConnectionStrings.SamsAppConnectionString: ${{parameters.samsAppConnectionString}} 
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download the build artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(build.artifactstagingdirectory)'
          - task: AzureRmWebAppDeployment@3
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              WebAppName: '${{parameters.websiteName}}'
              DeployToSlotFlag: true
              ResourceGroupName: '${{parameters.resourceGroupName}}'
              SlotName: '${{parameters.stagingSlotName}}'
              Package: '$(build.artifactstagingdirectory)/drop/SamLearnsAzure.Web.zip'
              RemoveAdditionalFilesFlag: true
              TakeAppOfflineFlag: true
              JSONFiles: '**/appsettings.json'
              AppSettings: '-ASPNETCORE_ENVIRONMENT "${{parameters.ASPNETCOREEnvironmentSetting}}"'
              ConfigurationSettings: '-ApplicationInsights.InstrumentationKey $(applicationInsightsInstrumentationKeyOutput)'

  - deployment: DeployAppInsightsAnnotation
    displayName: "Deploy application insights annotation to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    dependsOn: DeployInfrastructure
    pool:
      vmImage: ${{parameters.vmImage}}        
    strategy:
      runOnce:
        deploy:
          steps:
          - task: ms-appinsights.appinsightsreleaseannotations.release-task.ms-appinsights.ReleaseAnnotation@1
            displayName: 'Add release annotation to Azure Application Insights'
            inputs:
              applicationId: '${{parameters.applicationInsightsApplicationId}}'
              apiKey: '${{parameters.applicationInsightsApiKey}}'

  - deployment: DeployFunctionalTests
    displayName: "Deploy functional tests to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    dependsOn: 
    - DeployDatabase
    - DeployWebServiceapp
    - DeployWebsiteapp
    - DeployAppInsightsAnnotation
    pool:
      vmImage: ${{parameters.vmImage}}        
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download the build artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(build.artifactstagingdirectory)'
          - task: VSTest@2
            displayName: 'Run functional smoke tests on website and web service'
            inputs:
              searchFolder: '$(build.artifactstagingdirectory)'
              testAssemblyVer2: |
                **\SamLearnsAzure.FunctionalTests\SamLearnsAzure.FunctionalTests.dll
              uiTests: true
              runSettingsFile: '$(build.artifactstagingdirectory)/drop/FunctionalTests/SamLearnsAzure.FunctionalTests/test.runsettings'
              overrideTestrunParameters: |
               -ServiceUrl "${{parameters.serviceStagingUrl}}" 
               -WebsiteUrl "${{parameters.websiteStagingUrl}}" 
               -TestEnvironment "${{parameters.environment}}" 
               -KeyVaultURL "${{parameters.keyVaultURL}}" 
               -KeyVaultClientId "${{parameters.keyVaultClientId}}" 
               -KeyVaultClientSecret "${{parameters.keyVaultClientSecret}}"  

  - deployment: DeploySwapServiceAppSlots
    displayName: "Deploy swap service slots to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    dependsOn: 
    - DeployFunctionalTests
    pool:
      vmImage: ${{parameters.vmImage}}        
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            displayName: 'Swap Slots: web service'
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              WebAppName: '${{parameters.serviceName}}'
              ResourceGroupName: '${{parameters.resourceGroupName}}'
              SourceSlot: '${{parameters.stagingSlotName}}'

  - deployment: DeploySwapWebsiteAppSlots
    displayName: "Deploy swap website slots to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    dependsOn: 
    - DeployFunctionalTests
    pool:
      vmImage: ${{parameters.vmImage}}        
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            displayName: 'Swap Slots: website'
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              WebAppName: '${{parameters.websiteName}}'
              ResourceGroupName: '${{parameters.resourceGroupName}}'
              SourceSlot: '${{parameters.stagingSlotName}}'