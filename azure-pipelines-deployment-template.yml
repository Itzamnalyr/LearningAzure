parameters: # defaults for any parameters that aren't specified
  applicationInsightsApiKey: '$(ApplicationInsights--ApplicationIdDev)'
  applicationInsightsApplicationId: '$(ApplicationInsights--ApplicationIdDev)'
  applicationInsightsInstrumentationKey: $(ApplicationInsights--InstrumentationKeyDev)
  applicationInsightsLocation: 'East US'
  letsEncryptAppServiceContributerClientSecret: '***secret'
  ASPNETCOREEnvironmentSetting: 'Release'
  cognitiveServicesSubscriptionKey: '***secret'
  environment: 'Dev'  
  environmentLowercase: 'dev'
  databaseLoginName: '***secret'
  databaseLoginPassword: '***secret'
  databaseServerName: 'samsapp-dev-eu-sqlserver'
  databaseName: samsdb
  godaddy_key: '***secret'
  godaddy_secret: '***secret'
  keyVaultName: 'samsapp-data-eu-keyvault'
  keyVaultURL: 'https://samsapp-data-eu-keyvault.vault.azure.net/'
  keyVaultClientId: '***secret'
  keyVaultClientSecret: '***secret'
  letsEncryptUniqueRoleAssignmentGuid: '6e4cff57-e63a-403e-822c-e98e5ba02145'
  imagesStorageCDNURL: 'https://samsapp-dev-eu-cdnendpoint.azureedge.net/partimages'
  imagesStorageURL: 'https://samsappdeveustorage.blob.core.windows.net/partimages'
  partImagesContainerName: 'partimages'
  setImagesContainerName: 'setimages'
  redisCacheConnectionString: '***secret'
  resourceGroupName: 'SamLearnsAzureDev'
  resourceGroupLocation: 'East US'
  resourceGroupLocationShort: 'eu'
  roleAssignmentId: 'b24988ac-6180-42a0-ab88-20f7382dd24c'
  samsAppConnectionString: '***secret'
  serviceName: 'samsapp-dev-eu-service'
  serviceStagingUrl: 'https://samsapp-dev-eu-service-staging.azurewebsites.net/'
  serviceUrl: 'https://samsapp-dev-eu-service.azurewebsites.net/'
  stagingSlotName: 'Staging'
  storageAccountName: 'samsappdeveustorage'
  storageAccountKey: '***secret'
  userPrincipalLogin: '***secret'
  vmImage: 'windows-latest'
  websiteName: 'samsapp-dev-eu-web'
  websiteDomainName: 'dev.samlearnsazure.com'
  websiteStagingUrl: 'https://samsapp-dev-eu-web-staging.azurewebsites.net/'
  websiteUrl: 'https://samsapp-dev-eu-web.azurewebsites.net/'
 
jobs:
  - deployment: DeployInfrastructure
    displayName: "Deploy infrastructure to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    pool:
      vmImage: "windows-latest"    
    variables:
      ApplicationInsights.InstrumentationKey: ${{parameters.applicationInsightsInstrumentationKey}}
      AppSettings.Environment: ${{parameters.environment}}
      AppSettings.KeyVaultURL: ${{parameters.keyVaultURL}}
      AppSettings.ImagesStorageCDNURL: ${{parameters.imagesStorageCDNURL}}
      AppSettings.ImagesStorageURL: ${{parameters.imagesStorageURL}}
      AppSettings.PartImagesContainerName: ${{parameters.partImagesContainerName}}
      AppSettings.SetImagesContainerName: ${{parameters.setImagesContainerName}}
      AppSettings.RedisCacheConnectionString: ${{parameters.redisCacheConnectionString}}
      AppSettings.WebServiceURL: ${{parameters.serviceURL}}
      AppSettings.StorageAccountName: ${{parameters.storageAccountName}}
      AppSettings.CognitiveServicesSubscriptionKey: ${{parameters.cognitiveServicesSubscriptionKey}}
      AppSettings.CaptureStartErrors: ${{parameters.captureStartErrors}}
      ConnectionStrings.SamsAppConnectionString: ${{parameters.samsAppConnectionString}} 
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download the build artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(build.artifactstagingdirectory)'
          - task: dutchworkz.DisplayAllVariables.DisplayAllVariables.DutchWorkzToolsAllVariables@1
            displayName: 'Show all build variables in build output.'
          - task: PowerShell@2
            displayName: 'Set CName DNS entries in GoDaddy'
            inputs:
              targetType: FilePath
              filePath: '$(build.artifactstagingdirectory)/drop/EnvironmentARMTemplate/PowerShell/GoDaddyDNSSetup.ps1'
              arguments: '-godaddy_domain "samlearnsazure.com" -godaddy_name "${{parameters.environmentLowercase}}" -godaddy_destination "${{parameters.websiteName}}.azurewebsites.net" -godaddy_type "CNAME" -godaddy_key "${{parameters.godaddy_key}}" -godaddy_secret "${{parameters.godaddy_secret}}"'
            continueOnError: true # GoDaddy is not essential, and seems to have some reliability issues, so marking this to continue on any errors
            enabled: false
          - task: AzurePowerShell@4 
            displayName: 'Run Azure PowerShell to remove deployments older than 30 days' #This addresses a deployment quota limit: https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/deployment-quota-exceeded
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              ScriptPath: '$(build.artifactstagingdirectory)/drop/EnvironmentARMTemplate/PowerShell/DeploymentCleanup.ps1'
              ScriptArguments: '-ResourceGroupName "${{parameters.resourceGroupName}}"'
              azurePowerShellVersion: LatestVersion
            enabled: false
          - task: AzureCLI@2
            displayName: 'Deploy ARM templates'
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              scriptType: ps
              scriptLocation: inlineScript
              inlineScript: | 
                $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
                $timing = ""
                $timing = -join($timing, "1. Deployment started: ", $stopwatch.Elapsed.TotalSeconds, "`n")
                Write-Host "1. Deployment started: "$stopwatch.Elapsed.TotalSeconds

                $appPrefix = "samsapp"
                $environment = "${{parameters.environmentLowercase}}"
                $resourceGroupName = "${{parameters.resourceGroupName}}"
                $location = "${{parameters.resourceGroupLocation}}" 
                $locationShort = "${{parameters.resourceGroupLocationShort}}"                
                $keyVaultName = "$appPrefix-$environment-$locationShort-vault" #Must be <= 23 characters
                $serviceAPIName = "$appPrefix-$environment-$locationShort-service"
                $webSiteName = "$appPrefix-$environment-$locationShort-web"
                $sqlServerName = "$appPrefix-$environment-$locationShort-sqlserver"
                $webhostingName = "$appPrefix-$environment-$locationShort-hostingplan"
                $storageAccountName = "$appPrefix$environment$($locationShort)storage" #Must be <= 24 lowercase letters and numbers.
                $actionGroupName = "$appPrefix-$environment-$locationShort-actionGroup"
                $actionGroupShortName = "$environment-actgrp"
                $applicationInsightsName = "$appPrefix-$environment-$locationShort-appinsights"
                $applicationInsightsAvailablityTestName = "Availability home page test-$applicationInsightsName"
                $redisCacheName = "$appPrefix-$environment-$locationShort-redis"
                $cdnName = "$appPrefix-$environment-$locationShort-cdn"   
                $sqlDatabaseName = "${{parameters.databaseName}}" 
                $sqlAdministratorLoginUser = "${{parameters.databaseLoginName}}"
                $sqlAdministratorLoginPassword = "${{parameters.databaseLoginPassword}}" #The password is case-sensitive and must contain lower case, upper case, numbers and special characters. 
                $administratorUserLogin = "c6193b13-08e7-4519-b7b4-e6b1875b15a8"
                $administratorUserSid = "076f7430-ef4f-44e0-aaa7-d00c0f75b0b8"
                $websiteDomainName = "$environment.samlearnsazure.com"
                $letsEncryptAppServiceContributerClientSecret="RSRf?J_z+1t6W*EPpxkVhXTs9Szirku5"
                $azureDevOpsPrincipalId = "e60b0582-1d81-4ab3-92db-fbdc53ddeb92"
                $contactEmailAddress="samsmithnz@gmail.com"
                $templatesLocation = "$(build.artifactstagingdirectory)\drop\EnvironmentARMTemplate\Templates"               
                if ($keyVaultName.Length -gt 24)
                {
                    Write-Host "Key vault name must be 3-24 characters in length"
                    Break
                }
                if ($storageAccountName.Length -gt 24)
                {
                    Write-Host "Storage account name must be 3-24 characters in length"
                    Break
                }
                if ($letsEncryptAppServiceContributerClientSecret -eq $null)
                {
                    Write-Host "$letsEncryptAppServiceContributerClientSecret is null. Please set this secret before continuing"
                    Break
                }
                $timing = -join($timing, "2. Variables created: ", $stopwatch.Elapsed.TotalSeconds, "`n");
                Write-Host "2. Variables created: "$stopwatch.Elapsed.TotalSeconds

                #Resource group
                az group create --location "$location" --name "$resourceGroupName"
                $timing = -join($timing, "3. Resource group created:: ", $stopwatch.Elapsed.TotalSeconds, "`n");
                Write-Host "3. Resource group created: "$stopwatch.Elapsed.TotalSeconds

                #key vault
                az deployment group create --resource-group $resourceGroupName --name $keyVaultName --template-file "$templatesLocation\KeyVault.json" --parameters keyVaultName=$keyVaultName administratorUserPrincipalId=$administratorUserSid azureDevOpsPrincipalId=$azureDevOpsPrincipalId
                if($error)
                {
                    #purge any existing key vault because of soft delete
                    Write-Host "Purging existing keyvault"
                    az keyvault purge --name $keyVaultName 
                    Write-Host "Creating keyvault, round 2"
                    az deployment group create --resource-group $resourceGroupName --name $keyVaultName --template-file "$templatesLocation\KeyVault.json" --parameters keyVaultName=$keyVaultName administratorUserPrincipalId=$administratorUserSid azureDevOpsPrincipalId=$azureDevOpsPrincipalId
                    $error.clear()
                }
                $timing = -join($timing, "4. Key vault created:: ", $stopwatch.Elapsed.TotalSeconds, "`n");
                Write-Host "4. Key vault created: "$stopwatch.Elapsed.TotalSeconds

                #storage
                $storageOutput = az deployment group create --resource-group $resourceGroupName --name $storageAccountName --template-file "$templatesLocation\Storage.json" --parameters storageAccountName=$storageAccountName
                $storageJSON = $storageOutput | ConvertFrom-Json
                $storageAccountAccessKey = $storageJSON.properties.outputs.storageAccountKey.value
                az keyvault secret set --vault-name $keyVaultName --name "storageAccountAccessKey" --value $storageAccountAccessKey #Upload the secret into the key vault
                $timing = -join($timing, "5. Storage created: ", $stopwatch.Elapsed.TotalSeconds, "`n");
                Write-Host "5. Storage created: "$stopwatch.Elapsed.TotalSeconds

                #CDN
                az deployment group create --resource-group $resourceGroupName --name $cdnName --template-file "$templatesLocation\CDN.json" --parameters cdnName=$cdnName storageAccountName=$storageAccountName
                $timing = -join($timing, "6. CDN  created: ", $stopwatch.Elapsed.TotalSeconds, "`n");
                Write-Host "6. CDN created: "$stopwatch.Elapsed.TotalSeconds

                #Redis  
                $redisOutput = az deployment group create --resource-group $resourceGroupName --name $redisCacheName --template-file "$templatesLocation\Redis.json" --parameters redisCacheName=$redisCacheName
                $redisJSON = $redisOutput | ConvertFrom-Json
                $redisConnectionString = $redisJSON.properties.outputs.redisConnectionStringOutput.value
                $timing = -join($timing, "7. Redis created: ", $stopwatch.Elapsed.TotalSeconds, "`n");
                Write-Host "7. Redis created: "$stopwatch.Elapsed.TotalSeconds

                #SQL
                $sqlOutput = az deployment group create --resource-group $resourceGroupName --name $sqlServerName --template-file "$templatesLocation\SQL.json" --parameters sqlServerName=$sqlServerName databaseName=$sqlDatabaseName sqlAdministratorLogin=$sqlAdministratorLoginUser sqlAdministratorLoginPassword=$sqlAdministratorLoginPassword administratorUserLogin=$administratorUserLogin administratorUserSid=$administratorUserSid storageAccountName=$storageAccountName storageAccountAccessKey=$storageAccountAccessKey
                $sqlJSON = $sqlOutput | ConvertFrom-Json
                $sqlServerAddress = $sqlJSON.properties.outputs.sqlServerIPAddress.value
                $timing = -join($timing, "8. SQL created: ", $stopwatch.Elapsed.TotalSeconds, "`n");
                Write-Host "8. SQL created: "$stopwatch.Elapsed.TotalSeconds

                #Action Group
                az deployment group create --resource-group $resourceGroupName --name $actionGroupName --template-file "$templatesLocation\ActionGroup.json" --parameters actionGroupName=$actionGroupName appPrefix=$appPrefix environment=$environment contactEmailAddress=$contactEmailAddress
                $timing = -join($timing, "9. Action group created: ", $stopwatch.Elapsed.TotalSeconds, "`n");
                Write-Host "9. Action group created: "$stopwatch.Elapsed.TotalSeconds

                #Application Insights
                $applicationInsightsOutput = az deployment group create --resource-group $resourceGroupName --name $applicationInsightsName --template-file "$templatesLocation\ApplicationInsights.json" --parameters applicationInsightsName=$applicationInsightsName applicationInsightsAvailablityTestName="$applicationInsightsAvailablityTestName" websiteDomainName=$websiteDomainName 
                $applicationInsightsJSON = $applicationInsightsOutput | ConvertFrom-Json
                $applicationInsightsInstrumentationKey = $applicationInsightsJSON.properties.outputs.applicationInsightsInstrumentationKeyOutput.value
                $timing = -join($timing, "10. Application created: ", $stopwatch.Elapsed.TotalSeconds, "`n");
                Write-Host "10. Application insights created: "$stopwatch.Elapsed.TotalSeconds

                #Web hosting
                az deployment group create --resource-group $resourceGroupName --name $webhostingName --template-file "$templatesLocation\WebHosting.json" --parameters hostingPlanName=$webhostingName actionGroupName=$actionGroupName 
                $timing = -join($timing, "11. Web hosting created: ", $stopwatch.Elapsed.TotalSeconds, "`n");
                Write-Host "11. Web hosting created: "$stopwatch.Elapsed.TotalSeconds

                #Web service
                az deployment group create --resource-group $resourceGroupName --name $serviceAPIName --template-file "$templatesLocation\WebService.json" --parameters serviceAPIName=$serviceAPIName hostingPlanName=$webhostingName actionGroupName=$actionGroupName sqlServerName=$sqlServerName sqlServerAddress=$sqlServerAddress sqlDatabaseName=$sqlDatabaseName sqlDatabaseLoginName=$sqlAdministratorLoginUser sqlDatabaseLoginPassword=$sqlAdministratorLoginPassword
                #web service managed identity and setting keyvault access permissions
                $serviceAPIProdSlotIdentity = az webapp identity assign --resource-group $resourceGroupName --name $serviceAPIName 
                $serviceAPIStagingSlotIdentity = az webapp identity assign --resource-group $resourceGroupName --name $serviceAPIName  --slot staging
                $serviceAPIProdSlotIdentityPrincipalId = ($serviceAPIProdSlotIdentity | ConvertFrom-Json | SELECT PrincipalId).PrincipalId
                $serviceAPIStagingSlotIdentityPrincipalId =($serviceAPIStagingSlotIdentity | ConvertFrom-Json | SELECT PrincipalId).PrincipalId
                Write-Host "Setting access policies for key vault"
                az keyvault set-policy --name $keyVaultName --object-id $serviceAPIProdSlotIdentityPrincipalId --secret-permissions list get
                az keyvault set-policy --name $keyVaultName --object-id $serviceAPIStagingSlotIdentityPrincipalId --secret-permissions list get
                #Web service alerts
                az deployment group create --resource-group $resourceGroupName --name "webSiteAlerts" --template-file "$templatesLocation\WebAppAlerts.json" --parameters webAppName=$serviceAPIName actionGroupName=$actionGroupName 
                $timing = -join($timing, "12. Web service created: ", $stopwatch.Elapsed.TotalSeconds, "`n");
                Write-Host "12. Web service created: "$stopwatch.Elapsed.TotalSeconds

                #Web site
                az deployment group create --resource-group $resourceGroupName --name $webSiteName --template-file "$templatesLocation\Website.json" --parameters webSiteName=$webSiteName hostingPlanName=$webhostingName actionGroupName=$actionGroupName storageAccountName=$storageAccountName websiteDomainName=$websiteDomainName contactEmailAddress=$contactEmailAddress letsEncryptAppServiceContributerClientSecret="$letsEncryptAppServiceContributerClientSecret"
                #web site managed identity and setting keyvault access permissions
                $websiteProdSlotIdentity = az webapp identity assign --resource-group $resourceGroupName --name $webSiteName 
                $websiteStagingSlotIdentity = az webapp identity assign --resource-group $resourceGroupName --name $webSiteName  --slot staging
                $websiteProdSlotIdentityPrincipalId = ($websiteProdSlotIdentity | ConvertFrom-Json | SELECT PrincipalId).PrincipalId
                $websiteStagingSlotIdentityPrincipalId =($websiteStagingSlotIdentity | ConvertFrom-Json | SELECT PrincipalId).PrincipalId
                Write-Host "prod: " $websiteProdSlotIdentityPrincipalId
                Write-Host "staging: " $websiteStagingSlotIdentityPrincipalId
                Write-Host "Setting access policies for key vault"
                az keyvault set-policy --name $keyVaultName --object-id $websiteProdSlotIdentityPrincipalId --secret-permissions list get
                az keyvault set-policy --name $keyVaultName --object-id $websiteStagingSlotIdentityPrincipalId --secret-permissions list get
                #Website alerts
                az deployment group create --resource-group $resourceGroupName --name "webSiteAlerts" --template-file "$templatesLocation\WebAppAlerts.json" --parameters webAppName=$webSiteName actionGroupName=$actionGroupName 
                $timing = -join($timing, "13. Website created: ", $stopwatch.Elapsed.TotalSeconds, "`n");
                Write-Host "13. Website created: "$stopwatch.Elapsed.TotalSeconds

                Write-Host "storageAccountAccessKey: "$storageAccountAccessKey
                Write-Host "sqlServerIPAddress: "$sqlServerIPAddress
                Write-Host "servicePrincipalId: "$serviceAPIProdSlotIdentityPrincipalId
                Write-Host "serviceStagingSlotPrincipalId: "$serviceAPIStagingSlotIdentityPrincipalId
                Write-Host "websitePrincipalId: "$websiteProdSlotIdentityPrincipalId
                Write-Host "websiteStagingSlotPrincipalId: "$websiteStagingSlotIdentityPrincipalId
                Write-Host "applicationInsightsInstrumentationKey: "$applicationInsightsInstrumentationKey
                $timing = -join($timing, "14. All Done created: ", $stopwatch.Elapsed.TotalSeconds, "`n");
                Write-Host "14. All Done: "$stopwatch.Elapsed.TotalSeconds
                Write-Host "Timing: `n$timing"
                Write-Host "Were there errors? (If the next line is blank, then no!) $error"

          #- task: AzureResourceGroupDeployment@2
          #  displayName: 'Azure Deployment: Deploy ARM Template to resource group'
          #  inputs:
          #    azureSubscription: 'SamLearnsAzure connection to Azure Portal'
          #    resourceGroupName: '${{parameters.resourceGroupName}}'
          #    location: '${{parameters.resourceGroupLocation}}'
          #    csmFile: '$(build.artifactstagingdirectory)/drop/EnvironmentARMTemplate/azuredeploy.json'
          #    csmParametersFile: '$(build.artifactstagingdirectory)/drop/EnvironmentARMTemplate/azuredeploy.parameters.json'
          #    overrideParameters: '-userPrincipalLogin ${{parameters.userPrincipalLogin}} -databaseLoginName ${{parameters.databaseLoginName}} -databaseLoginPassword ${{parameters.databaseLoginPassword}} -environment ${{parameters.environmentLowercase}} -locationShort ${{parameters.resourceGroupLocationShort}}  -appServiceContributerClientSecret "${{parameters.appServiceContributerClientSecret}}" -websiteDomainName ${{parameters.websiteDomainName}} -roleAssignmentId ${{parameters.roleAssignmentId}} -letsEncryptUniqueRoleAssignmentGuid ${{parameters.letsEncryptUniqueRoleAssignmentGuid}}'
          #- task: keesschollaart.arm-outputs.arm-outputs.ARM Outputs@5
          #  displayName: 'Extract ARM template outputs to pipeline variables'
          #  inputs:
          #    ConnectedServiceNameARM: 'SamLearnsAzure connection to Azure Portal'
          #    resourceGroupName: ${{parameters.resourceGroupName}}
          #- task: AzurePowerShell@4 #Note that pipeline variables servicePrincipalId, websitePrincipalId, applicationInsightsInstrumentationKeyOutput, storageAccountKeyOutput, DatabaseLoginPassword, redisConnectionStringOutput are populated from the previous output task
          #  displayName: 'Run Azure PowerShell to setup KeyVault with ARM template output variables'
          #  inputs:
          #    azureSubscription: 'SamLearnsAzure connection to Azure Portal'
          #    ScriptPath: '$(build.artifactstagingdirectory)/drop/EnvironmentARMTemplate/PowerShell/KeyVault.ps1'
          #    ScriptArguments: '-KeyVaultName "${{parameters.KeyVaultName}}" -Environment "${{parameters.Environment}}" -ServicePrincipalId "$(servicePrincipalId)" -ServiceStagingSlotPrincipalId "$(serviceStagingSlotPrincipalId)" -WebsitePrincipalId "$(websitePrincipalId)" -WebsiteStagingSlotPrincipalId "$(websiteStagingSlotPrincipalId)" -ApplicationInsightsInstrumentationKey "$(applicationInsightsInstrumentationKeyOutput)" -StorageAccountKey "$(storageAccountKeyOutput)" -DatabaseServerName "${{parameters.DatabaseServerName}}" -DatabaseLoginName "${{parameters.DatabaseLoginName}}" -DatabaseLoginPassword "${{parameters.DatabaseLoginPassword}}" -RedisConnectionString "$(redisConnectionStringOutput)"'
          #    azurePowerShellVersion: LatestVersion


  - deployment: DeployDatabase
    displayName: "Deploy database to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    dependsOn: DeployInfrastructure
    pool:
      vmImage: ${{parameters.vmImage}}        
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download the build artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(build.artifactstagingdirectory)'
          - task: AzureCLI@2
            displayName: 'Restore database from backup, if needed'
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              scriptType: ps
              scriptLocation: 'drop/EnvironmentARMTemplate/PowerShell/ImportBACPAC.ps1'
              arguments: '-ResourceGroupName ${{parameters.resourceGroupName}} -DBServerName ${{parameters.databaseServerName}} -ServerAdmin ${{parameters.databaseLoginName}} -ServerPassword ${{parameters.databaseLoginPassword}} -DatabaseName "${{parameters.databaseName}}" -StorageAccountName "samsappprodeustorage" -StorageUri "https://samsappprodeustorage.blob.core.windows.net/" -StorageAccountKey ${{parameters.storageAccountKey}} -StorageContainerName "bacpacs" -Edition "Basic" -ServiceObjectiveName "Basic" -RunImportAlways $false'           
              scriptPath: '$(build.artifactstagingdirectory)'
          - task: SqlAzureDacpacDeployment@1
            displayName: 'Azure SQL dacpac publish'
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              ServerName: '${{parameters.databaseServerName}}.database.windows.net'
              DatabaseName: '${{parameters.databaseName}}'
              SqlUsername: '${{parameters.databaseLoginName}}'
              SqlPassword: '${{parameters.databaseLoginPassword}}'
              DacpacFile: '$(build.artifactstagingdirectory)/drop/Database/SamLearnsAzure.Database.dacpac'
              additionalArguments: '/p:BlockOnPossibleDataLoss=true'

  - deployment: DeployWebServiceApp
    displayName: "Deploy webservice app to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    dependsOn: DeployInfrastructure
    pool:
      vmImage: ${{parameters.vmImage}}        
    variables:
      ApplicationInsights.InstrumentationKey: ${{parameters.applicationInsightsInstrumentationKey}}
      AppSettings.Environment: ${{parameters.environment}}
      AppSettings.KeyVaultURL: ${{parameters.keyVaultURL}}
      AppSettings.ImagesStorageCDNURL: ${{parameters.imagesStorageCDNURL}}
      AppSettings.ImagesStorageURL: ${{parameters.imagesStorageURL}}
      AppSettings.PartImagesContainerName: ${{parameters.partImagesContainerName}}
      AppSettings.SetImagesContainerName: ${{parameters.setImagesContainerName}}
      AppSettings.RedisCacheConnectionString: ${{parameters.redisCacheConnectionString}}
      AppSettings.WebServiceURL: ${{parameters.serviceURL}}
      AppSettings.StorageAccountName: ${{parameters.storageAccountName}}
      AppSettings.CognitiveServicesSubscriptionKey: ${{parameters.cognitiveServicesSubscriptionKey}}
      AppSettings.CaptureStartErrors: ${{parameters.captureStartErrors}}
      ConnectionStrings.SamsAppConnectionString: ${{parameters.samsAppConnectionString}} 
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download the build artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(build.artifactstagingdirectory)'
          - task: AzureRmWebAppDeployment@3
            displayName: 'Azure App Service Deploy: web service'
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              WebAppName: '${{parameters.serviceName}}'
              DeployToSlotFlag: true
              ResourceGroupName: '${{parameters.resourceGroupName}}'
              SlotName: '${{parameters.stagingSlotName}}'
              Package: '$(build.artifactstagingdirectory)/drop/SamLearnsAzure.Service.zip'
              RemoveAdditionalFilesFlag: true
              TakeAppOfflineFlag: true
              RenameFilesFlag: true
              JSONFiles: '**/appsettings.json'
              AppSettings: '-ASPNETCORE_ENVIRONMENT "${{parameters.ASPNETCOREEnvironmentSetting}}"'
              ConfigurationSettings: '-ApplicationInsights.InstrumentationKey $(applicationInsightsInstrumentationKeyOutput)'

  - deployment: DeployWebsiteApp
    displayName: "Deploy website app to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    dependsOn: DeployInfrastructure
    pool:
      vmImage: ${{parameters.vmImage}}        
    variables:
      ApplicationInsights.InstrumentationKey: ${{parameters.applicationInsightsInstrumentationKey}}
      AppSettings.Environment: ${{parameters.environment}}
      AppSettings.KeyVaultURL: ${{parameters.keyVaultURL}}
      AppSettings.ImagesStorageCDNURL: ${{parameters.imagesStorageCDNURL}}
      AppSettings.ImagesStorageURL: ${{parameters.imagesStorageURL}}
      AppSettings.PartImagesContainerName: ${{parameters.partImagesContainerName}}
      AppSettings.SetImagesContainerName: ${{parameters.setImagesContainerName}}
      AppSettings.RedisCacheConnectionString: ${{parameters.redisCacheConnectionString}}
      AppSettings.WebServiceURL: ${{parameters.serviceURL}}
      AppSettings.StorageAccountName: ${{parameters.storageAccountName}}
      AppSettings.CognitiveServicesSubscriptionKey: ${{parameters.cognitiveServicesSubscriptionKey}}
      AppSettings.CaptureStartErrors: ${{parameters.captureStartErrors}}
      ConnectionStrings.SamsAppConnectionString: ${{parameters.samsAppConnectionString}} 
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download the build artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(build.artifactstagingdirectory)'
          - task: AzureRmWebAppDeployment@3
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              WebAppName: '${{parameters.websiteName}}'
              DeployToSlotFlag: true
              ResourceGroupName: '${{parameters.resourceGroupName}}'
              SlotName: '${{parameters.stagingSlotName}}'
              Package: '$(build.artifactstagingdirectory)/drop/SamLearnsAzure.Web.zip'
              RemoveAdditionalFilesFlag: true
              TakeAppOfflineFlag: true
              RenameFilesFlag: true
              JSONFiles: '**/appsettings.json'
              AppSettings: '-ASPNETCORE_ENVIRONMENT "${{parameters.ASPNETCOREEnvironmentSetting}}"'
              ConfigurationSettings: '-ApplicationInsights.InstrumentationKey $(applicationInsightsInstrumentationKeyOutput)'

#  - deployment: DeployAppInsightsAnnotation
#    displayName: "Deploy application insights annotation to ${{parameters.environment}} job"
#    environment: ${{parameters.environment}}
#    dependsOn: DeployInfrastructure
#    pool:
#      vmImage: ${{parameters.vmImage}}        
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#          - task: ms-appinsights.appinsightsreleaseannotations.release-task.ms-appinsights.ReleaseAnnotation@1
#            displayName: 'Add release annotation to Azure Application Insights'
#            inputs:
#              applicationId: '${{parameters.applicationInsightsApplicationId}}'
#              apiKey: '${{parameters.applicationInsightsApiKey}}'

  - deployment: DeployFunctionalTests
    displayName: "Deploy functional tests to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    dependsOn: 
    - DeployDatabase
    - DeployWebServiceapp
    - DeployWebsiteapp
    #- DeployAppInsightsAnnotation
    pool:
      vmImage: ${{parameters.vmImage}}        
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download the build artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(build.artifactstagingdirectory)'
          - task: PowerShell@2
            displayName: 'Check that chrome files exist'
            inputs:
              targetType: inline
              script: dir "$(build.artifactstagingdirectory)/drop/FunctionalTests/SamLearnsAzure.FunctionalTests"
          - task: VSTest@2
            displayName: 'Run functional smoke tests on website and web service'
            inputs:
              searchFolder: '$(build.artifactstagingdirectory)'
              testAssemblyVer2: |
                **\SamLearnsAzure.FunctionalTests\SamLearnsAzure.FunctionalTests.dll
              uiTests: true
              runSettingsFile: '$(build.artifactstagingdirectory)/drop/FunctionalTests/SamLearnsAzure.FunctionalTests/test.runsettings'
              overrideTestrunParameters: |
               -ServiceUrl "${{parameters.serviceStagingUrl}}" 
               -WebsiteUrl "${{parameters.websiteStagingUrl}}" 
               -TestEnvironment "${{parameters.environment}}" 
               -KeyVaultURL "${{parameters.keyVaultURL}}" 
               -KeyVaultClientId "${{parameters.keyVaultClientId}}" 
               -KeyVaultClientSecret "${{parameters.keyVaultClientSecret}}"  

  - deployment: DeploySwapServiceAppSlots
    displayName: "Deploy swap service slots to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    dependsOn: 
    - DeployFunctionalTests
    pool:
      vmImage: ${{parameters.vmImage}}        
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            displayName: 'Swap Slots: web service'
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              WebAppName: '${{parameters.serviceName}}'
              ResourceGroupName: '${{parameters.resourceGroupName}}'
              SourceSlot: '${{parameters.stagingSlotName}}'

  - deployment: DeploySwapWebsiteAppSlots
    displayName: "Deploy swap website slots to ${{parameters.environment}} job"
    environment: ${{parameters.environment}}
    dependsOn: 
    - DeployFunctionalTests
    pool:
      vmImage: ${{parameters.vmImage}}        
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureAppServiceManage@0
            displayName: 'Swap Slots: website'
            inputs:
              azureSubscription: 'SamLearnsAzure connection to Azure Portal'
              WebAppName: '${{parameters.websiteName}}'
              ResourceGroupName: '${{parameters.resourceGroupName}}'
              SourceSlot: '${{parameters.stagingSlotName}}'